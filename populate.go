package main

import (
	"bytes"
	"encoding/json"
	"net/http"

	"log"

	"strconv"

	"github.com/Pallinder/go-randomdata"
)

func main() {
	alliances := make(map[int]Alliance)
	alliances[0] = createAlliance()
	alliances[1] = createAlliance()
	alliances[2] = createAlliance()
	alliances[3] = createAlliance()
	alliances[4] = createAlliance()

	ch := make(chan bool)

	for i := 0; i < 3000; i++ {
		go postRandom(alliances, ch)
	}

	for i := 0; i < 3000; i++ {
		<-ch
		log.Printf("#%v", i)
	}
}
func createAlliance() Alliance {
	return Alliance{
		randomdata.SillyName(),
		randomdata.Number(0, 2),
		randomdata.Number(30, 50),
		randomdata.Number(1, 30),
	}
}

type Player struct {
	Name     string   `json:"name"`
	JoinedAt string   `json:"joined_at"`
	Level    int      `json:"level"`
	Alliance Alliance `json:"alliance"`
}

type Alliance struct {
	Name          string `json:"name"`
	Type          int    `json:"type"`
	Members       int    `json:"members"`
	ActiveMembers int    `json:"active_members"`
}

func postRandom(alliances map[int]Alliance, ch chan bool) {
	player := &Player{
		randomdata.FirstName(randomdata.Number(0, 1)),
		"2017-0" + strconv.Itoa(randomdata.Number(1, 9)) + "-" + strconv.Itoa(randomdata.Number(10, 28)),
		randomdata.Number(1, 50),
		alliances[randomdata.Number(0, 4)],
	}

	bodyM, _ := json.Marshal(player)
	ch <- curl(bodyM, "POST", "")
}

func curl(bodyByte []byte, method string, endpoint string) bool {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := bytes.NewReader(bodyByte)
	req, err := http.NewRequest(method, "http://0.0.0.0:9222/socialpoint/players/"+endpoint, body)
	if err != nil {
		return true
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return true
	}
	defer resp.Body.Close()

	return true
}
